from collections import Counter
class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        N = len(graph)
        dsu = DSU(N)
        for i in range(N):
            for j in range(i):
                #print(i, j)
                if graph[i][j]:
                    dsu.union(i, j)
        #print(dsu.parent)
        count = Counter(dsu.find(u) for u in initial)
        
        max_size = -1
        ans = min(initial)
        
        for node in initial:
            root = dsu.find(node)
            if count[root] == 1:
                if dsu.size(root) > max_size:
                    max_size = dsu.size(root)
                    ans = node
                elif dsu.size(root) == max_size and node < ans:
                    ans = node
        return ans
    
class DSU(object):
    def __init__(self, N):
        self.parent = range(N)
        self.sz = [1] * N
        
    def find(self, a):
        while self.parent[a] != a:
            a = self.parent[a]
        return a
    
    def union(self, a, b):
        ra = self.find(a)
        rb = self.find(b)
        #print(ra, rb)
        self.parent[ra] = rb
        self.sz[rb] += self.sz[ra]
    
    def size(self, a):
        return self.sz[a]
        
